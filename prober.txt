#!/usr/bin/python3
import sys
import time
import easysnmp
from easysnmp import Session

def main():
    # Parse command line arguments
    agent_info = sys.argv[1]
    agent_ip, agent_port, agent_community = agent_info.split(":")
    sampling_frequency = float(sys.argv[2])
    num_samples = int(sys.argv[3])
    interval_duration = 1 / sampling_frequency

    oid_list = ['1.3.6.1.2.1.1.3.0'] + [sys.argv[index] for index in range(4, len(sys.argv))]

    global prev_counters, curr_counters, prev_gauges, snmp_responses, last_sysuptime
    prev_counters = []
    curr_counters = []
    prev_gauges = []
    snmp_responses = []
    last_sysuptime = 0

    # Create SNMP session
    snmp_session = Session(hostname=agent_ip, remote_port=agent_port, community=agent_community, version=2, timeout=1, retries=1)

    if num_samples == -1:
        iteration = 0
        while True:
            sample_start_time = time.time()
            snmp_responses = snmp_session.get(oid_list)
            sysuptime = int(snmp_responses[0].value) / 100
            if sysuptime < last_sysuptime and iteration != 0:
                print("Agent has RESET")
                last_sysuptime = sysuptime  # Reset last_sysuptime
                prev_counters = []
                prev_gauges = []
                continue
            calculate_metrics(iteration, sample_start_time, sysuptime)
            sample_end_time = time.time()
            iteration += 1
            while time.time() < sample_start_time + interval_duration:
                pass
            if sample_end_time - sample_start_time > interval_duration:
                multiplier = 1
                adjusted_interval = multiplier * interval_duration
                while sample_end_time - sample_start_time > adjusted_interval:
                    multiplier += 1
                    adjusted_interval = multiplier * interval_duration
                while time.time() < sample_start_time + adjusted_interval:
                    pass
    else:
        for iteration in range(num_samples + 1):
            sample_start_time = time.time()
            snmp_responses = snmp_session.get(oid_list)
            sysuptime = int(snmp_responses[0].value) / 100
            if sysuptime < last_sysuptime and iteration != 0:
                print("Agent has RESET")
                last_sysuptime = sysuptime  # Reset last_sysuptime
                prev_counters = []
                prev_gauges = []
                continue
            calculate_metrics(iteration, sample_start_time, sysuptime)
            sample_end_time = time.time()
            while time.time() < sample_start_time + interval_duration:
                pass
            if sample_end_time - sample_start_time > interval_duration:
                multiplier = 1
                adjusted_interval = multiplier * interval_duration
                while sample_end_time - sample_start_time > adjusted_interval:
                    multiplier += 1
                    adjusted_interval = multiplier * interval_duration
                while time.time() < sample_start_time + adjusted_interval:
                    pass

def calculate_metrics(iteration, sample_start_time, sysuptime):
    global prev_counters, last_sysuptime, prev_gauges
    gauge_index = 0
    counter_index = 0
    curr_counters = []
    curr_gauges = []

    oid_index = 1  # Start index for while loop

    if iteration != 0:
        print(f"{sample_start_time}|", end='')

    while oid_index < len(snmp_responses):
        if snmp_responses[oid_index].value not in ['NOSUCHOBJECT', 'NOSUCHINSTANCE']:
            if snmp_responses[oid_index].snmp_type == 'GAUGE':
                curr_gauges.append(int(snmp_responses[oid_index].value))
                gauge_index += 1
                if iteration != 0 and len(prev_gauges) > 0:
                    gauge_diff = curr_gauges[gauge_index - 1] - prev_gauges[gauge_index - 1]
                    print(f"{curr_gauges[gauge_index - 1]}({gauge_diff})|", end='')
            elif snmp_responses[oid_index].snmp_type in ['COUNTER', 'COUNTER64']:
                curr_counters.append(int(snmp_responses[oid_index].value))
                counter_index += 1
                if iteration != 0 and len(prev_counters) > 0:
                    counter_diff = curr_counters[counter_index - 1] - prev_counters[counter_index - 1]
                    time_diff = sysuptime - last_sysuptime
                    counter_rate = counter_diff / time_diff
                    if counter_rate < 0:
                        if snmp_responses[oid_index].snmp_type == 'COUNTER':
                            counter_diff += 2 ** 32
                        elif snmp_responses[oid_index].snmp_type == 'COUNTER64':
                            counter_diff += 2 ** 64
                    print(f"{round(counter_diff / time_diff)}|", end='')

        oid_index += 1  # Increment the index for while loop

    prev_counters = curr_counters
    prev_gauges = curr_gauges
    last_sysuptime = sysuptime
    if iteration != 0:
        print()

if __name__ == "__main__":
    main()
